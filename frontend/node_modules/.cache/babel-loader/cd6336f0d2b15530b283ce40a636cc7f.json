{"ast":null,"code":"var _jsxFileName = \"/Users/jonathantan/Development/try/stocker-ttp/frontend/src/components/purchase.js\";\nimport React, { useState } from \"react\";\nimport { Form, Input, Grid } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction PurchaseForm(props) {\n  const [transactionInfo, setTransactionInfo] = useState({\n    ticker: \"\",\n    quantity: \"\"\n  });\n  let user_id = props.user_id;\n  let history = useHistory(); // on submit fetch and find/set the id of the current user to redux\n\n  let url = `http://localhost:3000/api/v1/transactions`;\n\n  let submitHandler = e => {\n    e.preventDefault();\n    let wholeIntegerCheck = /^[1-9]\\d*$/; ////check whole integer with regex\n\n    if (wholeIntegerCheck.test(transactionInfo.quantity) === false) {\n      alert(\"Please enter a whole integer\");\n    } else {\n      fetch(`${url}`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ ...transactionInfo,\n          user_id: user_id\n        })\n      }).then(resp => resp.json()).then(data => {\n        if (data.error) {\n          alert(data.error);\n        } else {\n          alert(data.message);\n          props.updateBalance(data.balance);\n          history.push(\"/transactions\");\n        }\n      });\n    }\n\n    e.target.querySelector(\"input#ticker\").value = \"\";\n    e.target.querySelector(\"input#quantity\").value = \"\";\n  };\n\n  return React.createElement(\"div\", {\n    className: \"login-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"login-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Form, {\n    onSubmit: submitHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(Form.Field, {\n    id: \"ticker\",\n    control: Input,\n    onChange: e => setTransactionInfo({ ...transactionInfo,\n      ticker: e.target.value\n    }),\n    placeholder: \"Ticker\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(Form.Field, {\n    id: \"quantity\",\n    control: Input,\n    onChange: e => setTransactionInfo({ ...transactionInfo,\n      quantity: e.target.value\n    }),\n    placeholder: \"QTY\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(Grid.Row, {\n    centered: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(Form.Button, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Buy\"))))));\n}\n\nfunction mapStateToProps(state) {\n  return {\n    user_id: state.userId\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    updateBalance: data => {\n      dispatch({\n        type: \"UPDATEBALANCE\",\n        payload: data\n      });\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PurchaseForm); // export default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/Users/jonathantan/Development/try/stocker-ttp/frontend/src/components/purchase.js"],"names":["React","useState","Form","Input","Grid","connect","useHistory","PurchaseForm","props","transactionInfo","setTransactionInfo","ticker","quantity","user_id","history","url","submitHandler","e","preventDefault","wholeIntegerCheck","test","alert","fetch","method","headers","Accept","body","JSON","stringify","then","resp","json","data","error","message","updateBalance","balance","push","target","querySelector","value","mapStateToProps","state","userId","mapDispatchToProps","dispatch","type","payload"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Input, Grid } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\n\nfunction PurchaseForm(props) {\n  const [transactionInfo, setTransactionInfo] = useState({\n    ticker: \"\",\n    quantity: \"\"\n  });\n\n  let user_id = props.user_id;\n  let history = useHistory();\n\n  // on submit fetch and find/set the id of the current user to redux\n\n  let url = `http://localhost:3000/api/v1/transactions`;\n\n  let submitHandler = e => {\n    e.preventDefault();\n\n    let wholeIntegerCheck = /^[1-9]\\d*$/;\n\n    ////check whole integer with regex\n    if (wholeIntegerCheck.test(transactionInfo.quantity) === false) {\n      alert(\"Please enter a whole integer\");\n    } else {\n      fetch(`${url}`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ ...transactionInfo, user_id: user_id })\n      })\n        .then(resp => resp.json())\n        .then(data => {\n          if (data.error) {\n            alert(data.error);\n          } else {\n            alert(data.message);\n            props.updateBalance(data.balance)\n            history.push(\"/transactions\");\n          }\n        });\n    }\n    e.target.querySelector(\"input#ticker\").value = \"\";\n    e.target.querySelector(\"input#quantity\").value = \"\";\n  };\n\n  return (\n    <div className=\"login-container\">\n      <div className=\"login-form\">\n        <Form onSubmit={submitHandler}>\n          <Form.Field\n            id=\"ticker\"\n            control={Input}\n            onChange={e =>\n              setTransactionInfo({ ...transactionInfo, ticker: e.target.value })\n            }\n            placeholder=\"Ticker\"\n          />\n          <Form.Field\n            id=\"quantity\"\n            control={Input}\n            onChange={e =>\n              setTransactionInfo({\n                ...transactionInfo,\n                quantity: e.target.value\n              })\n            }\n            placeholder=\"QTY\"\n          />\n\n          <Grid>\n            <Grid.Row centered>\n              <Form.Button>Buy</Form.Button>\n            </Grid.Row>\n          </Grid>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    user_id: state.userId\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    updateBalance: data => {\n      dispatch({ type: \"UPDATEBALANCE\", payload: data });\n    }\n  };\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(PurchaseForm);\n// export default connect(mapStateToProps, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}